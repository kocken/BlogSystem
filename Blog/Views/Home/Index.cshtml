@model IEnumerable<Domain.Thread>

@{
    ViewData["Title"] = "Home";
}

<div class="jumbotron">
    <h1>Blog</h1>
</div>

@if (TempData["NewRegistration"] != null && TempData["NewRegistration"].Equals(true))
{
    <script src="~/js/vex.combined.min.js"></script>
    <script>vex.defaultOptions.className = 'vex-theme-os'</script>
    <link href="~/css/vex.css" rel="stylesheet" />
    <link href="~/css/vex-theme-default.css" rel="stylesheet" />
    <script>
        vex.dialog.alert({
            message: 'You successfully created an account! You are now logged in.',
            className: 'vex-theme-default'
        })
    </script>
}
@if (TempData["Message"] != null)
{
    <script src="~/js/vex.combined.min.js"></script>
    <script>vex.defaultOptions.className = 'vex-theme-os'</script>
    <link href="~/css/vex.css" rel="stylesheet" />
    <link href="~/css/vex-theme-default.css" rel="stylesheet" />
    <script>
        vex.dialog.alert({
            message: '@TempData["Message"]',
            className: 'vex-theme-default'
        })
    </script>
}

<p>
    <a asp-action="Create">Create new thread</a>
</p>

<hr>
@for (int i = 0; i < Model.ToList().Count; i++)
{
    var item = Model.ToList()[i];
    <div class="thread">
        <h2>
            @Html.DisplayFor(modelItem => item.Title)
        </h2>
        <p class="creation">
            Posted by
            @Html.DisplayFor(modelItem => item.User.Username)
            at
            @Html.DisplayFor(modelItem => item.CreationTime)
        </p>
        <p class="message">
            @Html.DisplayFor(modelItem => item.Message)
        </p>
        <a href="comments">@Html.DisplayFor(modelItem => item.Comments.Count) comments</a>
    </div>
    @if (i+1 != Model.ToList().Count) // not the last item
    {
        <hr>
    }
}